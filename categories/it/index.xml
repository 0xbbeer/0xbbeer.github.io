<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IT on 0xbbeer Blog</title>
    <link>https://www.0xbbeer.ru/categories/it/</link>
    <description>Recent content in IT on 0xbbeer Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Nov 2022 23:42:07 +0300</lastBuildDate><atom:link href="https://www.0xbbeer.ru/categories/it/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux: SSH - полезные заметки</title>
      <link>https://www.0xbbeer.ru/posts/linux-ssh-notes/</link>
      <pubDate>Wed, 02 Nov 2022 23:42:07 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/posts/linux-ssh-notes/</guid>
      <description>Заметки по работе в SSH Будут дополняться
Local Port Forwarding Пробросить порт 5432 c хоста host2.0xbbeer.ru на порт 6432 локальной машины:
1ssh -L 6432:localhost:5432 user@host2.0xbbeer.ru Мы можем пробрасывать порт не только с хоста, к которму подключаемся, но и с хоста, недоступного локальной машине, но доступного удаленной. Пробросим порт 5432 с host3.0xbbeer.ru на порт 6432 локальной машины.
1ssh -L 6432:host3.0xbbeer.ru:5432 user@host2.0xbbeer.ru При пробросе портов в локальную машину можно указать интерфейс на который его делать, например, пробросим порт на все доступные интерфейсы (0.</description>
    </item>
    
    <item>
      <title>GitLab: SSO с помощью Keycloak</title>
      <link>https://www.0xbbeer.ru/posts/config-sso-for-gitlab/</link>
      <pubDate>Wed, 02 Nov 2022 22:35:55 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/posts/config-sso-for-gitlab/</guid>
      <description>Система на момент настройки:
CentOS 7 GitLab 14.7 Создаем клиента в Keycloak Тут все просто:
Client ID: gitlab; Enabled: On; Client Protocol: openid-connect; Access Type: confidential; Valid Redirect URIs: https://gitlab.0xbbeer.ru/* Сохраняем созданного клиента и переходим на вкладку Credentials. Копируем значение поля Secret, он нам пригодится в будущем.
Настраиваем GitLab Далее открываем файл gitlab.rb (PATH: /etc/gitlab/gitlab.rb ) и добавляем строки:
1gitlab_rails[&amp;#39;omniauth_enabled&amp;#39;] = true 2gitlab_rails[&amp;#39;omniauth_allow_single_sign_on&amp;#39;] = true 3gitlab_rails[&amp;#39;omniauth_auto_sign_in_with_provider&amp;#39;] = &amp;#39;openid_connect&amp;#39; 4gitlab_rails[&amp;#39;omniauth_block_auto_created_users&amp;#39;] = false 5gitlab_rails[&amp;#39;omniauth_auto_link_ldap_user&amp;#39;] = false 6gitlab_rails[&amp;#39;omniauth_auto_link_ldap_user] = [&amp;#34;openid_connect&amp;#34;] omniauth_enabled - включает Omniauth (по умолчанию включено);</description>
    </item>
    
    <item>
      <title>LibreNMS: настройка SSO с Keycloak</title>
      <link>https://www.0xbbeer.ru/posts/sso-for-librenms/</link>
      <pubDate>Wed, 02 Nov 2022 22:35:39 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/posts/sso-for-librenms/</guid>
      <description>Всем добрый день! Вообще инструкция по настройке SSO в LibreNMS есть в офф.документации, но там нет инфы о настройке связки с Keycloak, поэтому оставлю заметку тут.
Создаем клиента в Keycloak Заходим в админку Keycloak и создаем нового клиента.
Заполняем поля:
Client ID: librenms; Enabled: On; Client Protocol: openid-connect; Access Type: confidential; Valid Redirect URIs: URL вашего LibreNMS, с которого будет осуществлятся редирект,например, librenms.0xbbeer.ru/* Остальные параметры можно оставить по умолчнию или заполнить как нужно Вам.</description>
    </item>
    
    <item>
      <title>Python: Генерация сертификатов из Microsoft CA в Linux</title>
      <link>https://www.0xbbeer.ru/posts/python-msca-cert-gen/</link>
      <pubDate>Tue, 01 Nov 2022 16:30:09 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/posts/python-msca-cert-gen/</guid>
      <description>Те, кто в своей инфраструктуре использует Microsoft CA, могли часто встречаться с проблемой выпуска сертификатов для linux машин\cервисов.
Все время приходилось вручную генерировать сертификат с помощью openssl, а далее идти в веб интерфейс MS CA,запрашивать, потом скачивать сертификат и заливать его на машину.
К счастью, нашелся модуль python, который облегачет получение сертификатов в Linux- certsrv
Документация к модулю
Рассмотрим пример получения сертификата:
При установке модуля по умолчанию используется basic-аутентификация, мы будем рассматривать аутентификацию с помощью NTLM, поэтому установим модуль с добавлением [ntlm] к названию.</description>
    </item>
    
    <item>
      <title>Настройка SSO в Netbox с помощью Keycloak</title>
      <link>https://www.0xbbeer.ru/posts/netbox-sso-with-keycloak/</link>
      <pubDate>Sun, 09 Oct 2022 01:03:46 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/posts/netbox-sso-with-keycloak/</guid>
      <description>Для создания единой точки входа во внутренние сервисы с недавних пор я начал использовать проект Keycloak. Сегодня рассмотрим организацию SSO в Netbox с помощью него.
В документации Netbox описана настройка только для двух провайдеров :
Microsoft Azure AD Okta Netbox использует библиотеку python-soc-auth для взаимодействия с провайдерами.
Список доступных провайдеров можно посмотреть тут
Настройка клиента в Keycloak Заходим в веб интерфейс Keycloak, переходим на вкладку Clients и создаем нового клиента.</description>
    </item>
    
    <item>
      <title>Python: SSL CERTIFICATE_VERIFY_FAILED</title>
      <link>https://www.0xbbeer.ru/posts/python-ssl-cert-verify-failed/</link>
      <pubDate>Sun, 09 Oct 2022 00:09:21 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/posts/python-ssl-cert-verify-failed/</guid>
      <description>Сертификаты для внутренних сервисов я выпускаю с помощью локального CA. Бывает так, что при работе в виртуальном окружении Python (venv), например, с каким-нибудь внутренним API по средством HTTPS запросов, вылезает ошибка:
1SSL: CERTIFICATE_VERIFY_FAILED Связано это с тем, что наше виртуальное окружение, а точнее модуль certifi, ничего не знает о нашем локальном центре сертификации.
К счастью, на просторах инета нашлось простое решение1- добавить информацию о корневом сертификате в виртуальное окружение.
Для этого:</description>
    </item>
    
  </channel>
</rss>
