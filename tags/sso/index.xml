<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>sso on 0xbbeer Blog</title>
    <link>https://www.0xbbeer.ru/tags/sso/</link>
    <description>Recent content in sso on 0xbbeer Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Dec 2022 01:03:46 +0300</lastBuildDate><atom:link href="https://www.0xbbeer.ru/tags/sso/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jenkins: Настройка SSO c Keycloak</title>
      <link>https://www.0xbbeer.ru/posts/jenkins-config-sso/</link>
      <pubDate>Sat, 17 Dec 2022 01:03:46 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/posts/jenkins-config-sso/</guid>
      <description>Для настройки SSO c Keycloak используется следующий плагин: https://github.com/jenkinsci/keycloak-plugin?ysclid=lah1l3z94g845988575
Установка плагина в Jenkins На странице Jenkins dashboard нажимаем Manage Jenkins.
На странице Manage Jenkins нажимаем Manage Plugins.
Нажимаем на вкладку Available.
Фильтруем плагины по слову &amp;ldquo;keycloak&amp;rdquo;
Находим и отмечаем плагин Keycloak Authentication Plugin Версия 2.3.0 , дале нажимаем “Install without restart” или “Download now and install after restart”.
Перезапускаем Jenkins.
1systemctl restart jenkins Создание клиента в Keycloak Заходим в админку Keycloak и создаем нового клиента.</description>
    </item>
    
    <item>
      <title>SonarQube: Настройка SSO с Keycloak</title>
      <link>https://www.0xbbeer.ru/posts/sonarqube-sso/</link>
      <pubDate>Sat, 17 Dec 2022 01:03:46 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/posts/sonarqube-sso/</guid>
      <description>Для настройки SSO в SonaQube используется плагин: https://github.com/vaulttec/sonar-auth-oidc
Установка плагина для аутентификации в SonarQube Установите плагин OpenID Connect Authentication for SonarQube через магазин приложений SonarQube и перезагрузите сервер.
Создаем клиента в Keycloak Заходим в админку Keycloak и создаем нового клиента.
Заполняем поля:
Client ID: sonarqube; Enabled: On; Client Protocol: openid-connect; Access Type: confidential; Valid Redirect URIs: URL вашего LibreNMS, с которого будет осуществляться редирект,например, sonarqube.0xbbeer.ru/* Далее переходим на вкладку Mappers и нажимаем создать mapper.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://www.0xbbeer.ru/about/</link>
      <pubDate>Wed, 02 Nov 2022 22:35:55 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/about/</guid>
      <description>Привет! Меня зовут Антон! Я системный инженер из уездного города О. Мечтаю стать системным архитектором и сьездить в Антарктиду.
Этот блог - сборник заметок, которые, возможно, кому-то пригодятся в повседневной работе. Если мои &amp;ldquo;записки начинающего инженера&amp;rdquo; помогут хоть одному человеку - значит, не зря клацаю по клавиатуре! :)
На данный момент не знаю, что из этого всего выйдет, есть желание писать не только об айти, но и о музыке, путешествиях, пиве и прочих радостях жизни.</description>
    </item>
    
    <item>
      <title>GitLab: SSO с помощью Keycloak</title>
      <link>https://www.0xbbeer.ru/posts/config-sso-for-gitlab/</link>
      <pubDate>Wed, 02 Nov 2022 22:35:55 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/posts/config-sso-for-gitlab/</guid>
      <description>Система на момент настройки:
CentOS 7 GitLab 14.7 Создаем клиента в Keycloak Тут все просто:
Client ID: gitlab; Enabled: On; Client Protocol: openid-connect; Access Type: confidential; Valid Redirect URIs: https://gitlab.0xbbeer.ru/* Сохраняем созданного клиента и переходим на вкладку Credentials. Копируем значение поля Secret, оно нам пригодится в будущем.
Настраиваем GitLab Далее открываем файл gitlab.rb (PATH: /etc/gitlab/gitlab.rb ) и добавляем строки:
1gitlab_rails[&amp;#39;omniauth_enabled&amp;#39;] = true 2gitlab_rails[&amp;#39;omniauth_allow_single_sign_on&amp;#39;] = true 3gitlab_rails[&amp;#39;omniauth_auto_sign_in_with_provider&amp;#39;] = &amp;#39;openid_connect&amp;#39; 4gitlab_rails[&amp;#39;omniauth_block_auto_created_users&amp;#39;] = false 5gitlab_rails[&amp;#39;omniauth_auto_link_ldap_user&amp;#39;] = false 6gitlab_rails[&amp;#39;omniauth_auto_link_ldap_user] = [&amp;#34;openid_connect&amp;#34;] omniauth_enabled - включает Omniauth (по умолчанию включено);</description>
    </item>
    
    <item>
      <title>LibreNMS: настройка SSO с Keycloak</title>
      <link>https://www.0xbbeer.ru/posts/sso-for-librenms/</link>
      <pubDate>Wed, 02 Nov 2022 22:35:39 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/posts/sso-for-librenms/</guid>
      <description>Всем добрый день! Вообще инструкция по настройке SSO в LibreNMS есть в офф.документации, но там нет инфы о настройке связки с Keycloak, поэтому оставлю заметку тут.
Создаем клиента в Keycloak Заходим в админку Keycloak и создаем нового клиента.
Заполняем поля:
Client ID: librenms; Enabled: On; Client Protocol: openid-connect; Access Type: confidential; Valid Redirect URIs: URL вашего LibreNMS, с которого будет осуществлятся редирект,например, librenms.0xbbeer.ru/* Остальные параметры можно оставить по умолчнию или заполнить как нужно Вам.</description>
    </item>
    
    <item>
      <title>Netbox: Настройка SSO с помощью Keycloak</title>
      <link>https://www.0xbbeer.ru/posts/netbox-sso-with-keycloak/</link>
      <pubDate>Sun, 09 Oct 2022 01:03:46 +0300</pubDate>
      
      <guid>https://www.0xbbeer.ru/posts/netbox-sso-with-keycloak/</guid>
      <description>Для создания единой точки входа во внутренние сервисы с недавних пор я начал использовать проект Keycloak. Сегодня рассмотрим организацию SSO в Netbox с помощью него.
В документации Netbox описана настройка только для двух провайдеров :
Microsoft Azure AD Okta Netbox использует библиотеку python-soc-auth для взаимодействия с провайдерами.
Список доступных провайдеров можно посмотреть тут
Настройка клиента в Keycloak Заходим в веб интерфейс Keycloak, переходим на вкладку Clients и создаем нового клиента:</description>
    </item>
    
  </channel>
</rss>
